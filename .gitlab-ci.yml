stages:          # List of stages for jobs, and their order of execution
  - build
  - release

# Build the code into an executable, only if there's a new tag set
build_job:
  stage: build
  image: python:3.10-bullseye
  before_script:
    - python --version
    - python -m venv ./venv
    - source venv/bin/activate
    - pip install -U pyinstaller
  script:
    - pyinstaller src/bot.py --onefile -p venv/lib/python3.10/site-packages
  after_script:
    # dumb workaround to GitLab not being able to pass artifacts/variables 
    # from 1 job to another in the same workflow
    - echo "export BUILD_JOB=$CI_JOB_ID" > build_job
  artifacts:
    paths:
      - dist/main*
      - build_job
  rules:
   - if: $CI_COMMIT_TAG

# Do a release, only if there's a new tag set
release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    # Other half of dumb workaround to GitLab not being able to pass artifacts/variables
    # Here we're 'loading' the environment variables that were set in a previous job
    - source build_job
    - echo "Running the release job."
    - export URL="https://gitlab.com/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/-/jobs/$BUILD_JOB/artifacts/download"
    - |
      release-cli create --name "$CI_COMMIT_TAG" --tag-name $CI_COMMIT_TAG \
        --assets-link "{\"name\":\"Linux Executable\",\"url\":\"${URL}\"}" \
  rules:
    - if: $CI_COMMIT_TAG
  # Needs the build_job to be complete first, and to release using
  # the artifacts from that job
  needs:
    - job: build_job
      artifacts: true
